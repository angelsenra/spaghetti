jmp $main$

$FUNCTION finput() -> (:8)
finput:
    // Take the first letter of the input and store it at :8
    in :8

    finput.skip_first:
        // Flush input
        in :7
        jf (:7 = :7 == .10) $finput.skip_first$

    ret

$FUNCTION fprint(:8) -> ()
fprint:
    // Print every character starting at :8 and stopping at \0
    // (first char is assumed not to be null)
    rmem :7 :8

    fprint.skip_first:
        out :7
        :8 += .1
        rmem :7 :8
        jt :7 $fprint.skip_first$

    ret

$FUNCTION PrintNumber(:8) -> ()
fpNumber:
    out :8
    // TODO: 
    ret

$SUBROUTINE GameOfLife
gol:
    print ->Not .32 Yet .10 .10
    // TODO: 
    jmp $main$

$SUBROUTINE RockPaperScissors
rps:
    $fprint$(:8 = $rps.init$)
    jmp $.rpsLoop$

    .rpsLoop:
        .rpsInputLoop:
            out >
            $finput$()

            :7 = :8 == 0
            jt :7 $main$

            :7 = :8 == 1
            jt :7 $.rpsPlay$

            :7 = :8 == 2
            jt :7 $.rpsPlay$

            :7 = :8 == 3
            jt :7 $.rpsPlay$

            :8 = $main.invalid$
            call $fprint$
            jmp $.rpsInputLoop$

        .rpsPlay:
            call $.rpsAI$
            :2 = :8 % 1
            
            :7 = :1
            call $.rpsPrintMoves$
            print .32 vs .32
            :7 = :2
            call $.rpsPrintMoves$
            out .10

            call $.rpsWinner$
            wmem $.rpsGame0$ :2

            jmp $.rpsInputLoop$


    .rpsGame0:
        $.0
    .rpsCountPc:
        $.0
    .rpsCountHuman:
        $.0
    .rpsCountTie:
        $.0
    .rpsLastWinner:
        $.0

    .rpsRock:
        $ROCK.0
    .rpsPaper:
        $PAPER.0
    .rpsScissors:
        $SCISSORS.0
    .rpsPc:
        $PC wins.0
    .rpsHuman:
        $Human wins.0
    .rpsTie:
        $It's a tie!.0

    $FUNCTION Winner(:1, :2) -> (:3):
    .rpsWinner:
        // Choose a winner based on both moves
        :8 = :1 == :2
        jt :8 $..rpsWinner0$

        :8 = :2 + .1
        :8 %= .3
        :8 = :8 == :1
        jt :8 $..rpsWinner1$

        :8 = :1 + .1
        :8 %= .3
        :8 = :8 == :2
        jt :8 $..rpsWinner2$

        print EXCEPTION
        halt

        ..rpsWinner0:
            rmem :7 $.rpsCountTie$
            :7 += .1
            wmem $.rpsCountTie$ :7
            :8 = $.rpsTie$
            call $fprint$
            wmem $.rpsLastWinner$ .0
            jmp $..rpsTimes$

        ..rpsWinner1:
            rmem :7 $.rpsCountPc$
            :7 += .1
            wmem $.rpsCountPc$ :7
            :8 = $.rpsPc$
            call $fprint$
            wmem $.rpsLastWinner$ .1
            jmp $..rpsTimes$

        ..rpsWinner2:
            rmem :7 $.rpsCountHuman$
            :7 += .1
            wmem $.rpsCountHuman$ :7
            :8 = $.rpsHuman$
            call $fprint$
            wmem $.rpsLastWinner$ .2
            jmp $..rpsTimes$

        ..rpsTimes:
            print .32 (
            :8 = :7
            call $fpNumber$
            print .32 times) .10

        ret

    $FUNCTION AI() -> (:1):
    .rpsAI:
        // Choose a move based on previous moves
        rmem :1 $.rpsGame0$
        rmem :2 $.rpsLastWinner$
        :1 += .1
        :2 = :2 == .1
        :1 += :2
        :1 %= .3

        ret

    $FUNCTION PrintMoves(:7) -> (), :8:
    .rpsPrintMoves:
        jf :7 $..rpsPrint0$

        :8 = :7 == .1
        jt :8 $..rpsPrint1$

        :8 = :7 == .2
        jt :8 $..rpsPrint2$

        ..rpsPrint0:
            :8 = $.rpsRock$
            call $fprint$
            ret

        ..rpsPrint1:
            :8 = $.rpsPaper$
            call $fprint$
            ret

        ..rpsPrint2:
            :8 = $.rpsScissors$
            call $fprint$
            ret

    rps.init:
        $0. Exit
        $1. Rock
        $2. Paper
        $3. Scissors
        $.0

$Main
main:
    $fprint$(:8 = $main.init$)

    main.loop:
        $finput$()

        jt (:7 = :8 == 0) $main.exit$

        jt (:7 = :8 == 1) $gol$  // GameOfLife

        jt (:7 = :8 == 2) $rps$  // RockPaperScissors

        $fprint$(:8 = $main.invalid$)
        jmp $main.loop$

    main.exit:
        $fprint$(:8 = $main.end$)
        halt

    main.init:
        $Hello and welcome to my bowl of Spaghetti!
        $What program do you want to load?
        $0. Exit
        $1. Game of Life
        $2. Rock Paper Scissors
        $>.0

    main.invalid:
        $Invalid option, choose another one!
        $>.0

    main.end:
        $I really enjoyed this time spent with you.
        $Come back soon!
        $.0

