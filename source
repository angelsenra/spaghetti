jmp :main

$CONST sInitial:
sInitial:
    $Hello and welcome to my bowl of Spaghetti!
    $What program do you want to load?
    $0. Exit
    $1. Game of Life
    $2. Rock Paper Scissors
    $>.0

$CONST sInvalid:
sInvalid:
    $Invalid option, choose another one!
    $>.0

$CONST sFinished:
sFinished:
    $I really enjoyed this time spent with you.
    $Come back soon!
    $.0

$FUNCTION Input() -> (:8), :7:
finput:
    // Take the first letter of the input and store it at :8
    in :8

    .finputSkipFirst:
        // Flush input
        in :7
        eq :7 :7 .10
        jf :7 :.finputSkipFirst

    ret

$FUNCTION Print(:8) -> (), :7:
fprint:
    // Print every character starting at :8 and stopping at \0
    // (first char is assumed not to be null)
    rmem :7 :8

    .fprintSkipFirst:
        out :7
        add :8 :8 .1
        rmem :7 :8
        jt :7 :.fprintSkipFirst

    ret

$FUNCTION PrintNumber(:8) -> (), :7:
fpNumber:
    out :8

    ret

$SUBROUTINE GameOfLife:
gameOfLife:
    print ->Not .32 Yet .10 .10
    jmp :main

$SUBROUTINE RockPaperScissors, :6, :7, :8:
rockPaperScissors:
    set :8 :.srps
    call :fprint
    jmp :.rpsLoop

    .srps:
        $0. Exit
        $1. Rock
        $2. Paper
        $3. Scissors
        $.0

    .rpsGame0:
        $.0
    .rpsCountPc:
        $.0
    .rpsCountHuman:
        $.0
    .rpsCountTie:
        $.0
    .rpsLastWinner:
        $.0

    .rpsRock:
        $ROCK.0
    .rpsPaper:
        $PAPER.0
    .rpsScissors:
        $SCISSORS.0
    .rpsPc:
        $PC wins.0
    .rpsHuman:
        $Human wins.0
    .rpsTie:
        $It's a tie!.0

    $FUNCTION Winner(:1, :2) -> (:3):
    .rpsWinner:
        // Choose a winner based on both moves
        eq :8 :1 :2
        jt :8 :..rpsWinner0

        add :8 :2 .1
        mod :8 :8 .3
        eq :8 :8 :1
        jt :8 :..rpsWinner1

        add :8 :1 .1
        mod :8 :8 .3
        eq :8 :8 :2
        jt :8 :..rpsWinner2

        ..rpsWinner0:
            rmem :7 :.rpsCountTie
            add :7 :7 .1
            wmem :.rpsCountTie :7
            set :8 :.rpsTie
            call :fprint
            wmem :.rpsLastWinner .0
            jmp :..rpsTimes

        ..rpsWinner1:
            rmem :7 :.rpsCountPc
            add :7 :7 .1
            wmem :.rpsCountPc :7
            set :8 :.rpsPc
            call :fprint
            wmem :.rpsLastWinner .1
            jmp :..rpsTimes

        ..rpsWinner2:
            rmem :7 :.rpsCountHuman
            add :7 :7 .1
            wmem :.rpsCountHuman :7
            set :8 :.rpsHuman
            call :fprint
            wmem :.rpsLastWinner .2
            jmp :..rpsTimes

        ..rpsTimes:
            print .32 (
            set :8 :7
            call :fpNumber
            print .32 times) .10

        ret

    $FUNCTION AI() -> (:1):
    .rpsAI:
        // Choose a move based on previous moves
        rmem :1 :.rpsGame0
        rmem :2 :.rpsLastWinner
        add :1 :1 .1
        eq :2 :2 .1
        add :1 :1 :2
        mod :1 :1 .3

        ret

    $FUNCTION PrintMoves(:7) -> (), :8:
    .rpsPrintMoves:
        jf :7 :..rpsPrint0

        eq :8 :7 .1
        jt :8 :..rpsPrint1

        eq :8 :7 .2
        jt :8 :..rpsPrint2

        ..rpsPrint0:
            set :8 :.rpsRock
            call :fprint
            ret

        ..rpsPrint1:
            set :8 :.rpsPaper
            call :fprint
            ret

        ..rpsPrint2:
            set :8 :.rpsScissors
            call :fprint
            ret


    .rpsLoop:
        .rpsInputLoop:
            out >
            call :finput

            eq :7 :8 0
            jt :7 :main

            eq :7 :8 1
            jt :7 :.rpsPlay

            eq :7 :8 2
            jt :7 :.rpsPlay

            eq :7 :8 3
            jt :7 :.rpsPlay

            set :8 :sInvalid
            call :fprint
            jmp :.rpsInputLoop

        .rpsPlay:
            call :.rpsAI
            mod :2 :8 1
            
            set :7 :1
            call :.rpsPrintMoves
            print .32 vs .32
            set :7 :2
            call :.rpsPrintMoves
            out .10

            call :.rpsWinner
            wmem :.rpsGame0 :2

            jmp :.rpsInputLoop


$MAIN, :7, :8:
main:
    set :8 :sInitial
    call :fprint

    .mainLoop:
        call :finput

        eq :7 :8 0
        jt :7 :.mainEnd

        eq :7 :8 1
        jt :7 :gameOfLife

        eq :7 :8 2
        jt :7 :rockPaperScissors

        set :8 :sInvalid
        call :fprint
        jmp :.mainLoop

    .mainEnd:
        set :8 :sFinished
        call :fprint
        halt
